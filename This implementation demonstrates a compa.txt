This implementation demonstrates a comparative analysis of two fundamental data structures 
- Linked Lists and Custom Dynamic Arrays - for handling transaction and review data. 
The program processes transaction records using both structures simultaneously, 
where the Linked List 
(TransactionNode) offers O(1) insertion at the cost of O(n) traversal, 
while the Custom Array 
(TransactionArray) provides O(1) access with occasional O(n) resizing operations. 
Both implementations utilize Merge Sort (O(n log n)) for date-based sorting, 
though they differ in memory usage patterns: the Linked List requires extra space for node 
pointers but offers flexible memory allocation, while the Array uses contiguous memory for 
better cache performance but needs periodic resizing.
Additionally, the program includes a text analysis component that processes customer 
reviews, particularly focusing on one-star reviews. 
This part uses a specialized Linked List structure 
(WordNode) to track word frequencies and variations, 
implementing a similarity-based word merging 
algorithm to identify common patterns in negative feedback. 
The overall implementation showcases the 
practical tradeoffs between data structures: 
Linked Lists excel in dynamic operations but suffer in access time,
while Arrays offer faster access but have overhead in size management. 
This makes the code an excellent case study for comparing theoretical 
performance characteristics 